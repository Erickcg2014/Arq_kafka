name: taller7arqui

services:
  # Base de datos Facturaci√≥n
  db_facturacion:
    build: ./facturacion
    container_name: postgres_facturacion
    restart: unless-stopped
    env_file: ./facturacion/.env
    ports:
      - "5433:5432"   # expone distinto puerto en el host
    volumes:
      - facturacion_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Base de datos Pagos
  db_pagos:
    build: ./pagos
    container_name: postgres_pagos
    restart: unless-stopped
    env_file: ./pagos/.env
    ports:
      - "5434:5432"
    volumes:
      - pagos_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Servicio gRPC de Pagos
  pagos-service:
    build:
      context: ./pagos-service
    container_name: pagos-service
    ports:
      - "9090:9090"
    depends_on:
      - db_pagos
      - kafka
    networks:
      - app-network

  # Base de datos Inventario
  db_inventario:
    build: ./inventario
    container_name: postgres_inventario
    restart: unless-stopped
    env_file: ./inventario/.env
    ports:
      - "5435:5432"
    volumes:
      - inventario_data:/var/lib/postgresql/data
      - ./inventario:/docker-entrypoint-initdb.d  
    networks:
      - app-network

  # Base de datos Proveedores
  db_proveedores:
    build: ./proveedores
    container_name: postgres_proveedores
    restart: unless-stopped
    env_file: ./proveedores/.env
    ports:
      - "5436:5432"
    volumes:
      - proveedores_data:/var/lib/postgresql/data
      - ./proveedores:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: taller7arqui-zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  # Kafka
  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: taller7arqui-kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network
    


  # Backend Spring Boot
  backend:
    build: 
      context: ./ejercicioKAFKA
      dockerfile: Dockerfile
    container_name: spring_productos_app
    restart: unless-stopped
    depends_on:
      - db_facturacion
      - db_pagos
      - db_inventario
      - db_proveedores
      - kafka
    ports:
      - "8080:8080"
    networks:
      - app-network
    environment:
      DB_FACTURACION_URL: jdbc:postgresql://db_facturacion:5432/facturaciondb
      DB_PAGOS_URL: jdbc:postgresql://db_pagos:5432/pagosdb
      DB_INVENTARIO_URL: jdbc:postgresql://db_inventario:5432/inventariodb
      DB_PROVEEDORES_URL: jdbc:postgresql://db_proveedores:5432/proveedoresdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Mancity2004
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: productos_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  facturacion_data:
  pagos_data:
  inventario_data:
  proveedores_data:

networks:
  app-network:
    driver: bridge
